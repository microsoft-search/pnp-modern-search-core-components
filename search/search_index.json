{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PnP Modern Search - Core Components \u00b6 Information These components have been initially made by Ubisoft as part of their Microsoft Search implementation. They've been adapted are given to the community for free. A big thanks to them! Sharing is caring. The complete use case can be downloaded here The goal is to provide reusable components based on Microsoft Search and Microsoft Graph in general that can be used transversally in an organization. Despite we provide a SharePoint WebParts implementation over these components, this is not a new version, nor a replacement of the PnP Modern Search WebParts . The main difference is they can be used outside SharePoint to leverage Microsoft Graph and Microsoft Search. What are they? \u00b6 These components are regular web components built on top of Microsoft Graph Toolkit and Lit elements . What components are included? \u00b6 The following components are included in the bundle: Component HTML tag Purpose Search results <pnp-search-results> Display results from Microsoft Search index according to configured parameters. Search filters <pnp-search-filters> Display filters from a connected search results components Search box <pnp-search-input> Allow users to enter free text search keywords. Search verticals <pnp-search-verticals> Displays tabs to search by verticals Video player <pnp-video-player> Play video from SharePoint (outside of SharePoint domain) How I get started? \u00b6 To get started, simply follow the guide ! Thank you to all Ubisoft members who participate to this project ! Want to see them in action? \u00b6 You can play with components in the playground","title":"Home"},{"location":"#pnp-modern-search-core-components","text":"Information These components have been initially made by Ubisoft as part of their Microsoft Search implementation. They've been adapted are given to the community for free. A big thanks to them! Sharing is caring. The complete use case can be downloaded here The goal is to provide reusable components based on Microsoft Search and Microsoft Graph in general that can be used transversally in an organization. Despite we provide a SharePoint WebParts implementation over these components, this is not a new version, nor a replacement of the PnP Modern Search WebParts . The main difference is they can be used outside SharePoint to leverage Microsoft Graph and Microsoft Search.","title":"PnP Modern Search - Core Components"},{"location":"#what-are-they","text":"These components are regular web components built on top of Microsoft Graph Toolkit and Lit elements .","title":"What are they?"},{"location":"#what-components-are-included","text":"The following components are included in the bundle: Component HTML tag Purpose Search results <pnp-search-results> Display results from Microsoft Search index according to configured parameters. Search filters <pnp-search-filters> Display filters from a connected search results components Search box <pnp-search-input> Allow users to enter free text search keywords. Search verticals <pnp-search-verticals> Displays tabs to search by verticals Video player <pnp-video-player> Play video from SharePoint (outside of SharePoint domain)","title":"What components are included?"},{"location":"#how-i-get-started","text":"To get started, simply follow the guide ! Thank you to all Ubisoft members who participate to this project !","title":"How I get started?"},{"location":"#want-to-see-them-in-action","text":"You can play with components in the playground","title":"Want to see them in action?"},{"location":"thanks/","text":"A big thank you to all Ubisoft people that make this solution happen (by alphabetical order): L\u00e9o Bousquet , Content Strategist KM - Knowledge Management Iulian Colesnicenco , QA Engineer - Quality Control Franck Cornu , Microsoft 365 developer St\u00e9phanie Daigle , IT Manager Microsoft 365 Laura-Simona Dobresenciuc , Technical Lead - IT Development Mathilde Eginard , Content strategist Jessica Fernandes , IT Associate Director Communication & Collaboration Andrei-Lucian Ghenea , Senior Web Designer Rishi Nanda , IT Manager - Connect & Explore Product Team Manuela Neaga-Budoiu , Manager Software Engineering - Collab & Comm Mihaela Nita , Product Owner Cosmin-Alexandru Serban , FullStack Software Developer","title":"Thanks"},{"location":"development/getting_started/","text":"Getting started \u00b6 Prerequisites \u00b6 Visual Studio Code with the following recommended extensions installed: Bicep ESLint lit-plugin Tailwind CSS IntelliSense PowerShell 7 MDX MkDocs Node.js v16.19.1 or higher Create Azure AD application \u00b6 Get the solution locally \u00b6 Clone the repository from GitHub In the the project root folder, install dependencies using pnpm i . We use pnpm workspaces and lerna behind the scenes to manage depedencies correctly for all projects. Build all projects using npx lerna run build Web components \u00b6 Run and debug the solution \u00b6 Open the project root folder in Visual Studio Code. From the 'Terminal' window, run the following command: npx lerna run serve --scope=@pnp/modern-search-core This will bundle the solution and serve it from a local server on adresss http://localhost:8080/index.html : Use index.html as your sandbox The packages/components/dev/index.html is a sandbox page, meaning you can update it any way you want to test components behavior. To know all available parameters for components, go to the \"playground\". To debug the components, start debugging using the \"Local debug (Edge|Chrome)\" configuration: Run and debug tests \u00b6 Open the packages/components folder in Visual Studio Code. From the 'Terminal', run the following command: pnpm run test:watch This will start tests in watch mode on the http://localhost:8000/ . Choose then the test you want to debug: Notice To run all tests (ex: before a commit), run npx lerna run test --scope=@pnp/modern-search-core : Launch the \"Debug tests Edge\" VSCode configuration and choose the test you want to debug: Put breakpoints in your tests and refresh the page to trigger the test again: Run Storybook stories \u00b6 We use Storybook to demo components in different scenarios: To run Storybook locally run the following command: npx lerna run docs:watch --scope=@pnp/modern-search-core Notice All stories are read from the packages/components/src/stories folder. SPFx Web Parts \u00b6 Run and debug the solution \u00b6 Open the project root folder in Visual Studio Code. From the 'Terminal', run the following command: npx lerna run serve --scope=@pnp/modern-search-core-spfx You can also go directly to `packages/spfx and run npm run serve . Open the Hosted workbench debug configuration and add WebParts from Local category: Notice If you need to work on both web components and Web Parts at the same time, you can run the following commands From packages/components , run pnpm run build:watch From pacakges/spfx , run npm run serve Run the MkDocs documentation \u00b6 Open the project root folder in Visual Studio Code. From the 'Terminal', run the following command: pip install pygments toc pymdown-extensions markdown_include python -m mkdocs serve","title":"Getting started"},{"location":"development/getting_started/#getting-started","text":"","title":"Getting started"},{"location":"development/getting_started/#prerequisites","text":"Visual Studio Code with the following recommended extensions installed: Bicep ESLint lit-plugin Tailwind CSS IntelliSense PowerShell 7 MDX MkDocs Node.js v16.19.1 or higher","title":"Prerequisites"},{"location":"development/getting_started/#create-azure-ad-application","text":"","title":"Create Azure AD application"},{"location":"development/getting_started/#get-the-solution-locally","text":"Clone the repository from GitHub In the the project root folder, install dependencies using pnpm i . We use pnpm workspaces and lerna behind the scenes to manage depedencies correctly for all projects. Build all projects using npx lerna run build","title":"Get the solution locally"},{"location":"development/getting_started/#web-components","text":"","title":"Web components"},{"location":"development/getting_started/#run-and-debug-the-solution","text":"Open the project root folder in Visual Studio Code. From the 'Terminal' window, run the following command: npx lerna run serve --scope=@pnp/modern-search-core This will bundle the solution and serve it from a local server on adresss http://localhost:8080/index.html : Use index.html as your sandbox The packages/components/dev/index.html is a sandbox page, meaning you can update it any way you want to test components behavior. To know all available parameters for components, go to the \"playground\". To debug the components, start debugging using the \"Local debug (Edge|Chrome)\" configuration:","title":"Run and debug the solution"},{"location":"development/getting_started/#run-and-debug-tests","text":"Open the packages/components folder in Visual Studio Code. From the 'Terminal', run the following command: pnpm run test:watch This will start tests in watch mode on the http://localhost:8000/ . Choose then the test you want to debug: Notice To run all tests (ex: before a commit), run npx lerna run test --scope=@pnp/modern-search-core : Launch the \"Debug tests Edge\" VSCode configuration and choose the test you want to debug: Put breakpoints in your tests and refresh the page to trigger the test again:","title":"Run and debug tests"},{"location":"development/getting_started/#run-storybook-stories","text":"We use Storybook to demo components in different scenarios: To run Storybook locally run the following command: npx lerna run docs:watch --scope=@pnp/modern-search-core Notice All stories are read from the packages/components/src/stories folder.","title":"Run Storybook stories"},{"location":"development/getting_started/#spfx-web-parts","text":"","title":"SPFx Web Parts"},{"location":"development/getting_started/#run-and-debug-the-solution_1","text":"Open the project root folder in Visual Studio Code. From the 'Terminal', run the following command: npx lerna run serve --scope=@pnp/modern-search-core-spfx You can also go directly to `packages/spfx and run npm run serve . Open the Hosted workbench debug configuration and add WebParts from Local category: Notice If you need to work on both web components and Web Parts at the same time, you can run the following commands From packages/components , run pnpm run build:watch From pacakges/spfx , run npm run serve","title":"Run and debug the solution"},{"location":"development/getting_started/#run-the-mkdocs-documentation","text":"Open the project root folder in Visual Studio Code. From the 'Terminal', run the following command: pip install pygments toc pymdown-extensions markdown_include python -m mkdocs serve","title":"Run the MkDocs documentation"},{"location":"development/concepts/deployment/","text":"Deploy components Javascript bundle \u00b6 As of today, components Javascript bundle are not hosted on a publically accessible CDN. It means you can host them and consume them from your own environment (ex: Azure Blob Storage). We provide a deployment script to help you to deploy this solution to your Azure environment. Prerequisites: set up variables \u00b6 All script parameters are managed trhough a PowerShell script with the following variables: Variable name Description $ENV_AzDeployAppId If the deployment is done by an application, the Azure App ID. $ENV_AzDeployAppCertificateValue If the deployment is done by an application, the Azure App certificate as base64 value. $ENV_AzDeployTenantId The Azure tenant ID where to deploy $ENV_AzDeploySubcriptionId The Azure subscription ID $ENV_AzResourceGroupName The Azure resource group to use for deployment. Should exist before deployment. $ENV_AzStorageAccountName The Azure storage account name to deploy to. Will be created if doesn't exist. $ENV_AzBlobContainerName The container name to deploy the components bundle. Will be created if doesn't exist. $ENV_AzBlobContainerWebName The container bane to deploy the Storybook documentation (typically $web ) To deploy from your local machine: From the solution root folder, run npx lerna run bundle:prod --scope=@pnp/modern-search-core . This will bundle the components in production mode. From the /deploy folder run the deploy.ps1 script: .\\deploy.ps1 -Manual -Environement LOCAL -Version 0.0.0 The script provisions the Azure Blob container if doesn't exist and upload the components Javascript bundle in folder according to the variables.local|ci.ps1 parameters file. Variable name Description Env Environment where to deploy components. Use LOCAL to deploy with values from variables.local.ps1 . Use CI to deploy with values from variables.ci.ps1 Version Version to use for components. This will create a dedicated folder with ath version. Ex: 1.0.0 Manual Use this flag to do the deployment manually using an user account. In this case, you will be prompted for authentication. Without this flag, the script will try to deploy using an application according to $ENV_AzDeployAppId and $ENV_AzDeployAppCertificateValue Once deployed, you need to get the public URL of the bundle javascript file: This URL should be included in your HTML pages where components are consumed. Warning By default, Azure Blob container is publically accessible. Make sure you configure networking options at storage account level to change this behavior. Deploy Storybook playground \u00b6 To deploy the Storybook documentation, follow these steps: From the solution root folder, run: npx lerna run docs:build --scope=@pnp/modern-search-core From the /deploy folder run the deploy.ps1 script: .\\deploy-docs.ps1 -Manual -Env LOCAL -Version 0.0.0 Once deploy, you can access the Storybook application from the static website URL + /<version>/index.html (ex: https://<storage_account_name>.z9.web.core.windows.net/0.0.0/index.html ):","title":"Deployment"},{"location":"development/concepts/deployment/#deploy-components-javascript-bundle","text":"As of today, components Javascript bundle are not hosted on a publically accessible CDN. It means you can host them and consume them from your own environment (ex: Azure Blob Storage). We provide a deployment script to help you to deploy this solution to your Azure environment.","title":"Deploy components Javascript bundle"},{"location":"development/concepts/deployment/#prerequisites-set-up-variables","text":"All script parameters are managed trhough a PowerShell script with the following variables: Variable name Description $ENV_AzDeployAppId If the deployment is done by an application, the Azure App ID. $ENV_AzDeployAppCertificateValue If the deployment is done by an application, the Azure App certificate as base64 value. $ENV_AzDeployTenantId The Azure tenant ID where to deploy $ENV_AzDeploySubcriptionId The Azure subscription ID $ENV_AzResourceGroupName The Azure resource group to use for deployment. Should exist before deployment. $ENV_AzStorageAccountName The Azure storage account name to deploy to. Will be created if doesn't exist. $ENV_AzBlobContainerName The container name to deploy the components bundle. Will be created if doesn't exist. $ENV_AzBlobContainerWebName The container bane to deploy the Storybook documentation (typically $web ) To deploy from your local machine: From the solution root folder, run npx lerna run bundle:prod --scope=@pnp/modern-search-core . This will bundle the components in production mode. From the /deploy folder run the deploy.ps1 script: .\\deploy.ps1 -Manual -Environement LOCAL -Version 0.0.0 The script provisions the Azure Blob container if doesn't exist and upload the components Javascript bundle in folder according to the variables.local|ci.ps1 parameters file. Variable name Description Env Environment where to deploy components. Use LOCAL to deploy with values from variables.local.ps1 . Use CI to deploy with values from variables.ci.ps1 Version Version to use for components. This will create a dedicated folder with ath version. Ex: 1.0.0 Manual Use this flag to do the deployment manually using an user account. In this case, you will be prompted for authentication. Without this flag, the script will try to deploy using an application according to $ENV_AzDeployAppId and $ENV_AzDeployAppCertificateValue Once deployed, you need to get the public URL of the bundle javascript file: This URL should be included in your HTML pages where components are consumed. Warning By default, Azure Blob container is publically accessible. Make sure you configure networking options at storage account level to change this behavior.","title":"Prerequisites: set up variables"},{"location":"development/concepts/deployment/#deploy-storybook-playground","text":"To deploy the Storybook documentation, follow these steps: From the solution root folder, run: npx lerna run docs:build --scope=@pnp/modern-search-core From the /deploy folder run the deploy.ps1 script: .\\deploy-docs.ps1 -Manual -Env LOCAL -Version 0.0.0 Once deploy, you can access the Storybook application from the static website URL + /<version>/index.html (ex: https://<storage_account_name>.z9.web.core.windows.net/0.0.0/index.html ):","title":"Deploy Storybook playground"},{"location":"development/concepts/localization/","text":"All components supports localization (i.e. get translated to a specific language) through the Microsoft Graph Toolkit localization feature. The localization process covers the following elements: Static labels in components (i.e. translations). Use defined labels from component attributes data (ex: filter names, tab names, etc.) Localize components \u00b6 The language is managed globally on the page for all components. By default all components are displayed in English using en-us locale. Use the pnp-language-provider component and locale attribute to change the language: < pnp-language-provider id = \"languageSwitcher\" locale = \"fr-fr\" > </ pnp-language-provider > You can also programmatically change the language using Javascript: document . getElementById ( \"languageSwitcher\" ). setAttribute ( 'locale' , 'ro-ro' ) Notice You can use the show-picker attribute to test the language switching behavior. If no language provider is present on the page, the default language will be en-us . Localize data \u00b6 You can also localize the data passed as attribute for specific components using localized string format like this: { \"default\" : \"Default string for en-us\" , [ key : locale cul ture ]: \"FR\" , } The following components are localizable: Component Property in configuration pnp-search-verticals tabName pnp-search-filters displayName Example for search verticals [ { \"key\" : \"all\" , \"tabName\" :{ \"default\" : \"All\" , \"fr-fr\" : \"Tout le contenu\" , \"ro-ro\" : \"Toate\" }, \"tabValue\" : \"\" , \"isLink\" : false , \"linkUrl\" : null , \"openBehavior\" : 0 }, ] Notice If the label shouldn't be localized, you can also use a string value instead of an object (Ex: \"tabName\": \"Non localized value\" ).","title":"Localization"},{"location":"development/concepts/localization/#localize-components","text":"The language is managed globally on the page for all components. By default all components are displayed in English using en-us locale. Use the pnp-language-provider component and locale attribute to change the language: < pnp-language-provider id = \"languageSwitcher\" locale = \"fr-fr\" > </ pnp-language-provider > You can also programmatically change the language using Javascript: document . getElementById ( \"languageSwitcher\" ). setAttribute ( 'locale' , 'ro-ro' ) Notice You can use the show-picker attribute to test the language switching behavior. If no language provider is present on the page, the default language will be en-us .","title":"Localize components"},{"location":"development/concepts/localization/#localize-data","text":"You can also localize the data passed as attribute for specific components using localized string format like this: { \"default\" : \"Default string for en-us\" , [ key : locale cul ture ]: \"FR\" , } The following components are localizable: Component Property in configuration pnp-search-verticals tabName pnp-search-filters displayName Example for search verticals [ { \"key\" : \"all\" , \"tabName\" :{ \"default\" : \"All\" , \"fr-fr\" : \"Tout le contenu\" , \"ro-ro\" : \"Toate\" }, \"tabValue\" : \"\" , \"isLink\" : false , \"linkUrl\" : null , \"openBehavior\" : 0 }, ] Notice If the label shouldn't be localized, you can also use a string value instead of an object (Ex: \"tabName\": \"Non localized value\" ).","title":"Localize data"},{"location":"development/concepts/solution/","text":"The solution uses the following technologies Solution part Technology/Tool Comments Components code and logic Web Component -> Lit Element -> Microsoft Graph Toolkit -> Custom components. All components basically extend the MgtTemplatedComponent base class from @microsoft/mgt-element library. Components internal styling TailwindCSS Allow to quickly style components without having to maintain dedicated stylesheets. A must have! Components build Webpack 5 Allow to precisely define the output we want to be able to distribute the components. Also comes with a dev server allowing local debug and tests (ex: index.html ). Components demo and live documentation Storybook Components attributes/proeprties documentation is generated automatically from the code comments through [] custom-elements.json ](https://storybook.js.org/docs/web-components/api/argtypes#automatic-argtype-inference) file. Storybook is configured to run with Webpack 5. Test framework Web Test Runner with Pupeeter Configuration use ESBuild, Mocha, Chai and Sinon for tests. Static documentation MKdocs and Horizon platform Technical static documentation is only accessible internally (unlike components documentation). Why using Microsoft Graph Toolkit instead of regular web components? \u00b6 Microsoft Graph Toolkit provides several advantages to create reusable components: Comes with an authentication providers mechanim making it easy for components to consume Azure AD protected APIs, especially Graph API. Comes with a localization support. Comes with a template support with a data binding syntax as a convenient wrapper over web components default slot mechanism . Simple/flexible enough to be extended with the @microsoft/mgt-element base classes.","title":"Technologies used"},{"location":"development/concepts/solution/#why-using-microsoft-graph-toolkit-instead-of-regular-web-components","text":"Microsoft Graph Toolkit provides several advantages to create reusable components: Comes with an authentication providers mechanim making it easy for components to consume Azure AD protected APIs, especially Graph API. Comes with a localization support. Comes with a template support with a data binding syntax as a convenient wrapper over web components default slot mechanism . Simple/flexible enough to be extended with the @microsoft/mgt-element base classes.","title":"Why using Microsoft Graph Toolkit instead of regular web components?"}]}